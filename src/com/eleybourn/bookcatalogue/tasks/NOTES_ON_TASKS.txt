PROBLEM:
too many ways of using tasks.

GOALS:
 1. FragmentTask ==> replaced with AsyncTask. DONE.
 2. replace SimpleTask with AsyncTask executing on an Executor (multi-threaded). ==> DONE

 3. Removal of ManagedTask
 4. Removal of taskqueue
 5. cropper ?

----------------------------------------------------------------------------------------------------
3. ManagedTask's started from a BaseActivityWithTasks.

 * abstract {@link ManagedTask} extends Thread
 * Background task that is managed by TaskManager and uses TaskManager to coordinate display activities.
 *
 * {@link TaskManager}
 * handles the management of multiple tasks and passing messages with the help of a {@link MessageSwitch}
 *
 * {@link BaseActivityWithTasks}
 * Uses a TaskManager (and communicates with it) to handle messages for ManagedTask.
 * Handles progress messages (ProgressDialog) and user messages (toast)

Also involved are:
- a Client Listener, for example {@link TaskManager.TaskManagerListener},
  to which Messages can be send by the MessageSwitch
- a Controller, for example {@link TaskManager.TaskManagerController}
  which the client can 'get' from the MessageSwitch, and then use to get hold of the Sender.

Used by:
- BookSearchActivity
- UpdateFieldsFromInternetActivity
==> the SearchManager/SearchTasks for getting book information from web sites.

----------------------------------------------------------------------------------------------------
4. taskqueue - minimalistic traditional database backed 'MessageQueue' like product
   Task
   LegacyTask extends Task
   RunnableTask extends Task
   GenericTask extends RunnableTask

Only used by the GoodReads api where it does make sense to have 'survivable' tasks.
-> Android Service ?

 ----------------------------------------------------------------------------------------------------
5. CropImageActivity
Has yet another form of background job definition. This one is small/clean.
 ----------------------------------------------------------------------------------------------------

